Dict.empty_v0 = {}
// Dict.filterMap_v0 {} (fun (key, value) -> 0) = {}
// Dict.filterMap_v0 { a = "x"; b = "y"; c = "z" } (fun (key, value) -> if value == "y" then Nothing else (Just (key ++ value))) = { c = "cz"; a = "ax"}
// Dict.filterMap_v0 { a = "x"; b = "y"; c = "z" } (fun (key, value) -> if value == "y" then blank else (Just (key ++ value))) = blank
// Dict.filterMap_v0 { a = "x"; b = "y"; c = "z" } (fun (key, value) -> if value == "y" then false else (Just (key ++ value))) = Test.typeError_v0 "Expected the argument `f` passed to `Dict::filterMap` to return `Just` or `Nothing` for every entry in `dict`"
// Dict.filter_v1 { key1 = "val1"; key2 = "val2" } (fun (k, v) -> k == "key1") = { key1 = "val1"}
// Dict.filter_v1 { key1 = "val1"; key2 = "val2" } (fun (k, v) -> k == blank) = blank
// Dict.filter_v1 { key1 = "val1"; key2 = "val2" } (fun (k, v) -> v == "val1") = { key1 = "val1"}
// Dict.filter_v1 { key1 = 1; key2 = blank; key3 = 3 }  (fun (k, v) -> v > 0) = { key3 = 3; key1 = 1}
// Dict.foreach_v0 { key1 = "val1"; key2 = "val2" } (fun x -> x ++ "_append") = { key2 = "val2_append"; key1 = "val1_append"}
// Dict.fromListOverwritingDuplicates_v0 [["a";1];["b";2];["a";3]] = { b = 2 ; a = 3 }
// Dict.fromListOverwritingDuplicates_v0 [["a";1];["b";2];["c";3]] = { c = 3 ; b = 2 ; a= 1 }
// Dict.fromListOverwritingDuplicates_v0 [] = {}
// Dict.fromListOverwritingDuplicates_v0 [["a";1];["b";2];["c";3;3]] = Test.typeError_v0 "Todo: It has length 3 but must have length 2"
// Dict.fromListOverwritingDuplicates_v0 [[1;1]] = Test.typeError_v0 "Todo: Keys must be Strings"
// Dict.fromListOverwritingDuplicates_v0 [["a";1];2;["c";3]] = Test.typeError_v0 "Todo: It is of type Int instead of List"
// Dict.fromList_v0 [["a";1];["b";2];["a";3]] = Nothing // duplicate key
// Dict.fromList_v0 [["a";1];["b";2];["c";3]] = Just { c = 3; b = 2; a = 1 }
// Dict.fromList_v0 [["a";1];["b";2];["c";3;3]] = Test.typeError_v0 "Todo: It has length 3 but must have length 2"
// Dict.fromList_v0 [[1;1]] = Test.typeError_v0 "Todo: Keys must be Strings"
// Dict.fromList_v0 [["a";1];2;["c";3]] = Test.typeError_v0 "Todo: It is of type Int instead of List"
// Dict.fromList_v0 [] = Just {}
Dict.get_v0 { key1 = "val1" } "key1" = "val1"
Dict.get_v1 { key1 = "val1" } "key1" = Just "val1"
Dict.isEmpty_v0 { a = 1 } = false
Dict.isEmpty_v0 {} = true
Dict.keys_v0 { key1 = "val1" } = [ "key1"]
// Dict.map_v0  { key1 = "val1"; key2 = "val2";  } (fun (k, x) -> k ++ x) = { key2 = "key2val2"; key1 = "key1val1" }
Dict.member_v0 { otherKey = 5; someKey = 5 } "someKey" = true
Dict.member_v0 { otherKey = 5 } "someKey" = false
// Dict.merge_v0 { key1 = "val1" } { key2 = "val2" } = { key2 = "val2"; key1 = "val1"}
Dict.singleton_v0 "one" 1 = { one = 1 }
Dict.size_v0 { a = 3; b = 1; c = 1 } = 3
Dict.size_v0 {} = 0
// Dict.toJSON_v0 { key1 = "val1"; key2 = "val2"; } = "{ \"key1\": \"val1\", \"key2\": \"val2\" }"
Dict.toList_v0 { a = 1; b = 2; c = 3 } = [ [ "a"; 1 ], [ "b"; 2 ], [ "c"; 3 ]]
Dict.toList_v0 {} = []
Dict.values_v0 { key1 = "val1" } = ["val1"]
